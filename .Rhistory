# p-value of the two-sided t-test versus p-value of the one-sided t-test:
t.test(weight.men,weight.women, alternative = "two.sided")$p.value # two-tailed
t.test(weight.men,weight.women, alternative = "greater")$p.value # one-tailed
# divide the one by the other and see ...
b = t.test(weight.men,weight.women, alternative = "greater")$p.value # one-tailed
a = t.test(weight.men,weight.women, alternative = "two.sided")$p.value # two-tailed
a/b
b/a
# No need to understand this code - just look at the graph and shaded areas.
x = seq(-5,5,by=0.01)
y = dt(x,df=372.45)
z = dt(seq(1.84,5,0.01),df=372.45)
plot(x,y,type='l',lwd=3);abline(v = 1.8453, lwd=2,col='blue',lty=3);polygon(c(x[x>=1.84], max(x), 1.84), c(y[x>=1.84], 0, 0), col = rgb(0.78, 0.3, 1, alpha = 0.8))
# No need to understand this code - just look at the graph and shaded areas.
x = seq(-5,5,by=0.01)
y = dt(x,df=372.45)
plot(x,y,type='l',lwd=3);abline(v = c(-1.8453,1.8453), lwd=2,col='blue',lty=3);polygon(c(x[x>=1.84], max(x), 1.84), c(y[x>=1.84], 0, 0), col = rgb(0.78, 0.3, 1, alpha = 0.8));polygon(c(min(x),x[x<=-1.84], min(x)), c(y[x<=-1.84], 0, 0), col = rgb(0.78, 0.3, 1, alpha = 0.8))
hist(dat$height[rows.men], col = rgb(red = 0,green = 0.5,blue = 1,alpha = 0.9), breaks = 20, main = "Histogram of height", xlab = "Height", probability = TRUE);
hist(dat$height[rows.women], col = rgb(red = 1,green = 0.5,blue = 0.1,alpha = 0.6), breaks = 20, add = TRUE, probability = TRUE);
abline(v=c(mean(dat$height[rows.men], na.rm =TRUE),mean(dat$height[rows.women],na.rm = TRUE)),
lty=c(3,3),col=c("blue","darkorange"),lwd = 3);
legend("topright", legend = c("men","women"), lty=c(1,1), lwd = 2, col=c("blue","orange"))
### SOLUTION
age.men <- dat$age[rows.men]
mean(age.men)
# one-sample t-test, one-tailed (alternative = "less")
t.test(age.men, mu = 50, alternative = "less")
# Two-sample t.test, one-tailed (alternative = "less")
t.test(dat$height[rows.women],dat$height[rows.men],alternative = "less")
Buckingham.chol = num.dat[rows.Buckingham,]$chol
### SOLUTION
num.dat <- dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
# Mean values:
sapply(num.dat[rows.Buckingham,], mean, na.rm = TRUE)
### SOLUTION
unique(dat$location)
#
rows.Buckingham <- which(dat$location == "Buckingham")
rows.Louisa <- which(dat$location == "Louisa")
### SOLUTION
num.dat <- dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
# Mean values:
sapply(num.dat[rows.Buckingham,], mean, na.rm = TRUE)
sapply(num.dat[rows.Louisa,], mean, na.rm = TRUE)
Buckingham.chol = num.dat[rows.Buckingham,]$chol
Louisa.chol = num.dat[rows.Louisa,]$chol
t.test(Buckingham.chol, Louisa.chol, alternative = "two.sided")
# Check the normality of the distribution using a QQ-plot (Reminder)
qqnorm(dat$weight,main="weight"); qqline(dat$weight)
#
# Perform a Shapiro-Wilk test
shapiro.test(dat$weight)
# extract the p-value
shapiro.test(dat$weight)$p.value
# Reminder: for p-value >= 0.05, the data is normally distributed. For p-value < 0.05, the data is not normally distributed.
num.dat <- dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)] #create a dataframe containing only numeric columns
sapply(num.dat,shapiro.test) # apply the Shapiro-Wilk test on every column of "num.dat"
qqnorm(dat$bp.1d,main="Blood pressure"); qqline(dat$bp.1d)
boxplot(list(dat$bp.1d[rows.men],dat$bp.1d[rows.women]),main="bp.1d values", names = c("men","women"))
t.test(dat$bp.1d[rows.men],dat$bp.1d[rows.women], alternative = "two.sided")
# The observed t-statistics is:
t.obs = t.test(dat$bp.1d[rows.men],dat$bp.1d[rows.women], alternative = "two.sided")$statistic
# Sample random rows (according to the size of the male group)
i.randomMen = sample(1:nrow(dat),length(rows.men))
#
# Compute the t-test between the 2 random groups and get the t-value
t.h0=t.test(dat$bp.1d[i.randomMen],
dat$bp.1d[-i.randomMen])$statistic
t.h0
# Sample random rows (according to the size of the male group)
i.randomMen = sample(1:nrow(dat),length(rows.men))
#
# Compute the t-test between the 2 random groups and get the t-value
t.h0=t.test(dat$bp.1d[i.randomMen],
dat$bp.1d[-i.randomMen])$statistic
t.h0
# Sample random rows (according to the size of the male group)
i.randomMen = sample(1:nrow(dat),length(rows.men))
#
# Compute the t-test between the 2 random groups and get the t-value
t.h0=t.test(dat$bp.1d[i.randomMen],
dat$bp.1d[-i.randomMen])$statistic
t.h0
# Sample random rows (according to the size of the male group)
i.randomMen = sample(1:nrow(dat),length(rows.men))
#
# Compute the t-test between the 2 random groups and get the t-value
t.h0=t.test(dat$bp.1d[i.randomMen],
dat$bp.1d[-i.randomMen])$statistic
t.h0
# Sample random rows (according to the size of the male group)
i.randomMen = sample(1:nrow(dat),length(rows.men))
#
# Compute the t-test between the 2 random groups and get the t-value
t.h0=t.test(dat$bp.1d[i.randomMen],
dat$bp.1d[-i.randomMen])$statistic
t.h0
# Sample random rows (according to the size of the male group)
i.randomMen = sample(1:nrow(dat),length(rows.men))
#
# Compute the t-test between the 2 random groups and get the t-value
t.h0=t.test(dat$bp.1d[i.randomMen],
dat$bp.1d[-i.randomMen])$statistic
t.h0
# Sample random rows (according to the size of the male group)
i.randomMen = sample(1:nrow(dat),length(rows.men))
#
# Compute the t-test between the 2 random groups and get the t-value
t.h0=t.test(dat$bp.1d[i.randomMen],
dat$bp.1d[-i.randomMen])$statistic
t.h0
# Sample random rows (according to the size of the male group)
i.randomMen = sample(1:nrow(dat),length(rows.men))
#
# Compute the t-test between the 2 random groups and get the t-value
t.h0=t.test(dat$bp.1d[i.randomMen],
dat$bp.1d[-i.randomMen])$statistic
t.h0
# Sample random rows (according to the size of the male group)
i.randomMen = sample(1:nrow(dat),length(rows.men))
#
# Compute the t-test between the 2 random groups and get the t-value
t.h0=t.test(dat$bp.1d[i.randomMen],
dat$bp.1d[-i.randomMen])$statistic
t.h0
t.values = sapply(1:10000,function(i) {
# random columns
i.randomMen = sample(1:nrow(dat),length(rows.men))
#
# get t-value between the 2 random groups
t.test(dat$bp.1d[i.randomMen],
dat$bp.1d[-i.randomMen])$statistic
})
#
# Plot the histogram
hist(t.values)
mean(t.values)
sd(t.values)
qqnorm(t.values);qqline(t.values)
x = seq(-5,5,by=0.1)
y = dt(x,df=nrow(dat)-2)
hist(t.values,freq=FALSE);lines(x,y,type='l',col= 'red',lwd=3)
hist(t.values,xlim=c(-5,5));abline(v=t.obs,lty=3,lwd=4,col='red');abline(v=-t.obs,lty=3,lwd=1,col='red3')
p.value = sum(t.values < -abs(t.obs) | t.values > abs(t.obs))/length(t.values)
p.value
## Degrees of freedom df
df = nrow(dat)-2
##
## this would be the one-sided p-value for the upper tail test (i.e. the probability of observing a t-value > t.obs)
pt(t.obs, df = df, lower.tail=FALSE)
##
## this is the two-sided p-value
2*pt(t.obs, df = df, lower.tail=FALSE)
t.test(dat$bp.1d[rows.men],dat$bp.1d[rows.women])
# You can extract the p-value using $p.value
t.test(dat$bp.1d[rows.men],dat$bp.1d[rows.women])$p.value
t.values = sapply(1:10000,function(i) {
# random columns
i.randomMen = sample(1:nrow(dat),length(rows.men))
#
# get t-value between the 2 random groups
t.test(dat$bp.1d[i.randomMen],
dat$bp.1d[-i.randomMen])$statistic
})
#
# Plot the histogram
hist(t.values)
p.value = sum(t.values < -abs(t.obs) | t.values > abs(t.obs))/length(t.values)
p.value
x = seq(-4,4,by=0.1)
y = dt(x,df=nrow(dat)-2)  # built the t-distribution
z = dnorm(x)  # built the standard normal distribution
#compare both distributions:
plot(x,y,type="l",col= 'blue',lwd=3, main = "t vs. norm for large df");lines(x,z,lty=4,col= 'red',lwd=2);legend("topright",legend=c("t","norm"),lty=c(1,4), lwd = 2, col=c("blue","red"))
# p-value based on the t-distribution
2*pt(t.obs, df = df, lower.tail=FALSE)
# p-value based on the standard normal distribution
2*pnorm(t.obs, lower.tail=FALSE)
expression = all.aml['FOSB',]
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
opts_knit$set(root.dir  = "~/")
all.aml = read.delim('http://bioinfo.ipmb.uni-heidelberg.de/crg/datascience3fs/practicals/data/all.aml.cleaned.csv',header=TRUE)
all.aml.anno = read.delim("http://bioinfo.ipmb.uni-heidelberg.de/crg/datascience3fs/practicals/data/all.aml.anno.cleaned.csv", header=TRUE)
#
# we convert all.aml into a data matrix rather than a data.frame
all.aml = data.matrix(all.aml)
i.all = which(all.aml.anno$ALL.AML=='AML') ## we extract the row numbers of the ALL patients
expression = all.aml['FOSB',]
hist(expression,breaks = 30)
qqnorm(expression);qqline(expression)
# divide the FOSB expression data in two groups according to ALL or AML patients:
exp.all = all.aml['FOSB',i.all]
exp.aml = all.aml['FOSB',-i.all]
# test for a difference in the mean expression values using the Wilcoxon test:
wilcox.test(exp.all,exp.aml)
t.test(exp.all, exp.aml)
dat.brca = read.delim('http://bioinfo.ipmb.uni-heidelberg.de/crg/datascience3fs/practicals/data/gbsg_ba_ca.dat', stringsAsFactors = FALSE)
## build contingency table
table(dat.brca$meno, dat.brca$hormon)
CT = table(dat.brca$meno,dat.brca$hormon)
OR = (CT[1,1]/CT[1,2])/(CT[2,1]/CT[2,2])
OR
## build contingency table
tab = table(dat.brca$meno,dat.brca$hormon)
#
## run the FET
fisher.test(tab, alternative = 'greater')
CT = table(dat.brca$meno,dat.brca$hormon)
OR = (CT[1,1]/CT[1,2])/(CT[2,1]/CT[2,2])
OR
## build contingency table
tab = table(dat.brca$meno,dat.brca$hormon)
#
## run the FET
fisher.test(tab, alternative = 'greater')
?fisher.test
## build contingency table
tab = table(dat.brca$meno,dat.brca$hormon)
#
## run the FET
fisher.test(tab, alternative = 'greater')
tab
CT = table(dat.brca$meno,dat.brca$hormon)
OR = (CT[1,1]/CT[1,2])/(CT[2,1]/CT[2,2])
OR
## build contingency table
tab = table(dat.brca$meno,dat.brca$hormon)
#
## run the FET
fisher.test(CT, alternative = 'greater')
## build contingency table
tab = table(dat.brca$meno,dat.brca$hormon)
#
## run the FET
fisher.test(tab, alternative = 'greater')
fisher.test(tab)
chisq.test(tab)
tab
## contingency table
tab = table(dat.brca$age>40,dat.brca$grade)
tab # tumor grades 1,2,3; age under 40 (FALSE) and over 40 (TRUE)
##
chisq.test(tab)
tot = apply(tab,2,sum) # this is the total number of occurrences in the 3 categories of "grade", independently of "age"
tot
age = apply(tab,1,sum) # this is the total number of persons above/below 40, independently of "grade"
age
tot.proportions = tot/sum(tot) # HO proportions (the proportions of occurrences in the three categories of grade, independently of age)
tab.exp = sapply(tot.proportions,function(x) {x*age}) # expected counts under H0
tab.exp
mean_weights = c(16.64268,17.69074,15.07522,14.52752,15.76787)
x = seq(12,18,by =0.01)
y = dnorm(x, mean=wK, sd=s/sqrt(n)) # built a normal distribution of the expected mean weights for King penguins from the known parameters
wK = 15
wE = 16
s = 3.5
n = 10 # number of measurements per day
mean_weights = c(16.64268,17.69074,15.07522,14.52752,15.76787)
x = seq(12,18,by =0.01)
y = dnorm(x, mean=wK, sd=s/sqrt(n)) # built a normal distribution of the expected mean weights for King penguins from the known parameters
plot(x,y,type='l',lwd=3,col='red',
main=paste0('Distribution of average weight of King penguins (n=',n,')'))
rej_lim = qnorm(p=0.05,mean=wK,sd=s/sqrt(n),lower.tail = FALSE)
rej_lim
plot(x,y,type='l',lwd=3,col='red',
main=paste0('Distribution of average weight of King penguins (n=',n,')'));
abline(v=rej_lim,lwd=3,lty=3,col='purple');
abline(v=mean_weights,lty=3,lwd=2,col='blue')
set.seed(123) # for reproducibility
alpha = 0.05
p = sapply(1:10000,function(i) {
x = rnorm(10);y = rnorm(10)       # generate two random samples from the same normal distribution
t.test(x,y)$p.value               # perform a t-test and get the p-value
})    # perform this 10000 times
hist(p,breaks=20);abline(v=alpha,col='red',lwd=3) # distribution of the p-values
sum(p<alpha)/length(p)
alphas = c(0.01,0.02,0.03,0.04,0.05,0.07,0.1,0.2)
fpr = sapply(alphas,function(alpha) {
sum(p<alpha)/length(p)
})
plot(alphas,fpr,xlab='alpha',pch=19,col='red');abline(0,1,lwd=2,lty=2,col='lightgrey')
p = sapply(1:10000,function(i) {
x = rt(10,df=1);y = rt(10,df=1)
t.test(x,y)$p.value
})
hist(p,breaks=20);abline(v=alpha,col='red',lwd=3) # distribution of the p-values
sum(p<alpha)/length(p)
alphas = c(0.01,0.02,0.03,0.04,0.05,0.07,0.1,0.2)
fpr = sapply(alphas,function(alpha) {
sum(p<alpha)/length(p)
})
plot(alphas,fpr,xlab='alpha',pch=19,col='red');abline(0,1,lwd=2,lty=2,col='lightgrey')
### SOLUTION
i.rnd = sample(1:nrow(all.aml),1) # get a random index
gene.exp = all.aml[i.rnd,] # select a random gene
qqnorm(gene.exp, main=rownames(all.aml)[i.rnd]);qqline(gene.exp)
### SOLUTION
## t-test
t.test(gene.exp[i.all],gene.exp[-i.all])$p.value
## Wilcoxon test
wilcox.test(gene.exp[i.all],gene.exp[-i.all])$p.value
### SOLUTION
P = apply(all.aml,1,function(x){
p.t = t.test(x[i.all],x[-i.all])$p.value
p.w = wilcox.test(x[i.all],x[-i.all])$p.value
return(c(p.t,p.w))
})
### SOLUTION
plot(-log10(P[1,]),-log10(P[2,]),pch=20,xlab = '-log10(T-test)',ylab='-log10(Wilcoxon)')
rdirichlet(100000)
install.packages("LaplacesDemon")
rdirichlet(100000)
library(LaplacesDemon)
rdirichlet(100000)
library(LaplacesDemon)
rdirichlet(100000, alpha = c(1,1,1))
library(LaplacesDemon)
hist(rdirichlet(100000, alpha = c(1,1,1)))
library(LaplacesDemon)
hist(rdirichlet(100000, alpha = c(2,1,1)))
library(LaplacesDemon)
hist(rdirichlet(100000, alpha = c(2,0,1)))
library(LaplacesDemon)
hist(rdirichlet(100000, alpha = c(2,0,5)))
library(LaplacesDemon)
max(rdirichlet(100000, alpha = c(2,0,5)))
library(LaplacesDemon)
max(rdirichlet(100000, alpha = c(2,0,5)))
library(LaplacesDemon)
max(rdirichlet(100000, alpha = c(1,1,5)))
library(LaplacesDemon)
max(rdirichlet(100000, alpha = c(-1,1,5)))
library(LaplacesDemon)
max(rdirichlet(100000, alpha = c(1,100,5)))
library(LaplacesDemon)
max(rdirichlet(100000, alpha = c(1,100,50)))
library(LaplacesDemon)
x = seq(0,1,0.01)
ddirichlet(x, alpha = c(1,100,50)))
library(LaplacesDemon)
x = seq(0,1,0.01)
ddirichlet(x, alpha = c(1,100,50))
library(LaplacesDemon)
x = seq(0,1,0.01)
ddirichlet(x, alpha = c(1,1,1))
library(LaplacesDemon)
x = seq(0,0.9,0.01)
ddirichlet(x, alpha = c(1,1,1))
library(LaplacesDemon)
x = c(0,1,2)
ddirichlet(x, alpha = c(1,1,1))
library(LaplacesDemon)
x = c(0,0.5,1)
ddirichlet(x, alpha = c(1,1,1))
knitr::opts_chunk$set(echo = TRUE)
read.csv("/Users/annavonbachmann/Downloads/FACS/Lung-counts.csv")
library(Seurat)
x = load("/Users/annavonbachmann/Downloads/droplet_Liver_seurat_tiss.Robj")
load("/Users/annavonbachmann/Downloads/droplet_Liver_seurat_tiss.Robj")
load("/Users/annavonbachmann/Downloads/droplet_Liver_seurat_tiss.Robj")
View(tiss)
View(tiss$raw.data)
View(tiss[raw.data])
View(tiss["raw.data"])
View(tiss[["raw.data"]])
tiss[["raw.data"]]
tiss[["RNA"]]
tiss@raw.data
View(tiss@raw.data)
x = as.data.frame(tiss@raw.data)
View(x)
load("/Users/annavonbachmann/Downloads/droplet_Lung_seurat_tiss.Robj")
load("/Users/annavonbachmann/Downloads/facs_Lung_seurat_tiss.Robj")
load("/Users/annavonbachmann/Downloads/facs_Lung_seurat_tiss.Robj")
load("/Users/annavonbachmann/Downloads/facs_Heart_seurat_tiss.Robj")
read.csv("/Users/annavonbachmann/Downloads/5829687/FACS/Lung-counts.csv")
read.csv("/Users/annavonbachmann/Downloads/FACS/Lung-counts.csv")
annot = read.csv("/Users/annavonbachmann/Downloads/annotations_facs.csv")
annot = read.csv("/Users/annavonbachmann/Downloads/annotations_facs.csv")
annot2 = read.csv("/Users/annavonbachmann/Downloads/annotations_droplet.csv")
nrow(annot)+nrow(annot2)
sum(annot$tissue=="lung")
sum(annot$tissue=="Lung")
sum(annot$tissue=="Lung")
sum(annot2$tissue== "Lung")
sum(annot$tissue=="Lung")
sum(annot2$tissue== "Heart")
sum(annot$tissue=="Lung")
sum(annot2$tissue== "heart")
sum(annot$tissue=="Lung")
unique(annot2$tissue)
sum(annot$tissue=="Lung")
sum(annot2$tissue== "Heart_and_Aorta")
sum(annot$tissue=="Heart")
sum(annot2$tissue== "Heart_and_Aorta")
sum(annot$tissue=="Brain")
sum(annot2$tissue== "Brain")
unique(annot$tissue)
sum(annot$tissue=="Brain")
sum(annot2$tissue== "Brain")
unique(annot$tissue)
sum(annot$tissue=="Brain_Non-Myeloid")
sum(annot2$tissue== "Brain_Non-Myeloid")
unique(annot2$tissue)
sum(annot$tissue=="Brain_Non-Myeloid")
sum(annot2$tissue== "Brain_Non-Myeloid")
unique(annot$tissue)
sum(annot$tissue=="Brain_Non-Myeloid")
sum(annot2$tissue== "Brain_Non-Myeloid")
unique(annot$tissue)
sum(annot$tissue=="Brain_Non-Myeloid"|"Brain_Myeloid")
unique(annot$tissue)
sum(annot$tissue==("Brain_Non-Myeloid"|"Brain_Myeloid"))
unique(annot$tissue)
sum(annot$tissue==("Brain_Non-Myeloid"OR "Brain_Myeloid"))
unique(annot$tissue)
sum(annot$tissue== "Brain_Non-Myeloid" |annot$tissue== "Brain_Myeloid")
sum(annot2$tissue== "Brain_Non-Myeloid")
unique(annot$tissue)
sum(annot$tissue== "Brain_Non-Myeloid" |annot$tissue== "Brain_Myeloid")
sum(annot2$tissue== "brain")
unique(annot$tissue)
sum(annot$tissue== "Brain_Non-Myeloid" |annot$tissue== "Brain_Myeloid")
sum(annot2$tissue== "Brain")
unique(annot2$tissue)
sum(annot$tissue== "Brain_Non-Myeloid" |annot$tissue== "Brain_Myeloid")
sum(annot2$tissue== "Brain")
load("/Users/annavonbachmann/Downloads/droplet_Lung_seurat_tiss.Robj")
x = tiss@raw.count
x = tiss@raw.data
View(x)
x = data.frame(tiss@raw.data)
x = as.matrix(tiss@raw.data)
load("/Users/annavonbachmann/Downloads/droplet_Lung_seurat_tiss.Robj")
View(tiss)
annot = read.csv("/Users/annavonbachmann/Downloads/annotations_facs.csv")
annot2 = read.csv("/Users/annavonbachmann/Downloads/annotations_droplet.csv")
unique(annot2$tissue)
sum(annot$tissue== "Brain_Non-Myeloid" |annot$tissue== "Brain_Myeloid")
sum(annot2$tissue== "Lung")
load("/Users/annavonbachmann/Downloads/facs_Lung_seurat_tiss.Robj")
unique(annot2$tissue)
sum(annot$tissue== "Lung")
sum(annot2$tissue== "Lung")
load("/Users/annavonbachmann/Downloads/droplet_Lung_seurat_tiss.Robj")
unique(annot2$tissue)
sum(annot$tissue== "Heart_and_Aorta")
sum(annot2$tissue== "Heart_and_Aorta")
unique(annot$tissue)
sum(annot$tissue== "Heart_and_Aorta")
sum(annot2$tissue== "Heart_and_Aorta")
unique(annot$tissue)
sum(annot$tissue== "Heart")
sum(annot2$tissue== "Heart_and_Aorta")
colnames(annot)
unique(annot$cell)
colnames(annot)
unique(annot$cell_ontology_class)
unique(annot2$cell_ontology_class)
View(annot)
unique(annot2[annot2$tissue == "Lung"]$cell_ontology_class)
unique(annot2[annot2$tissue == "Lung",]$cell_ontology_class)
unique(annot1[annot1$tissue == "Lung",]$cell_ontology_class)
unique(annot[annot$tissue == "Lung",]$cell_ontology_class)
unique(annot[annot$tissue == "Heart",]$cell_ontology_class)
?pnorm
install.packages("rstan", type = "source")
devtools::install_github("jaleesr/BITFAM")
library(Seurat)
library(BITFAM)
Lung_data = load("/Users/annavonbachmann/Downloads/droplet_Lung_seurat_tiss.Robj")
load("/Users/annavonbachmann/Downloads/droplet_Lung_seurat_tiss.Robj")
rm(Lung_data)
data_matrix_normalized = BITFAM_preprocess(raw_data = tiss)
?NormalizeData
NormalizeData(tiss, normalization.method = "LogNormalize")
NormalizeData(tiss@raw.data, normalization.method = "LogNormalize")
data_matrix_normalized = BITFAM_preprocess(raw_data = tiss@raw.data)
head(rownames(data_matrix_normalized), n = 5)
?BITFAM
BITFAM_res <- BITFAM(data = data_matrix_normalized, species = "mouse", scATAC_obj = NA)
BITFAM_res <- BITFAM(data = data_matrix_normalized, species = "human", scATAC_obj = NA, ncores = 1)
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
load("/Users/annavonbachmann/Downloads/droplet_Lung_seurat_tiss.Robj")
LogNormalize(tiss@raw.data)
x = LogNormalize(tiss@raw.data)
x
<br>
<br>
<br>
630,97/3
630.97/3
660*2/3
660*2
1320/3
210,32+440
210.32+440
210.32+440+300
View(TFBS_pos)
setwd("Documents/GitHub/deeplife4eu.github.io/")
